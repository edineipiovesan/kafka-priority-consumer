/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.edn.event.kafka;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MyAvroEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3381501808882379250L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyAvroEvent\",\"namespace\":\"com.github.edn.event.kafka\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"avro.java.string\":\"String\",\"description\":\"Unique identifier for the event\"},{\"name\":\"message\",\"type\":\"string\",\"doc\":\"A message to process\",\"avro.java.string\":\"String\"},{\"name\":\"created_at\",\"type\":\"string\",\"doc\":\"Create timestamp at format ISO-8601\",\"avro.java.string\":\"String\"},{\"name\":\"time_to_live\",\"type\":\"long\",\"doc\":\"Messages that exceed this time will not be processed anymore\",\"default\":500}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MyAvroEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MyAvroEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MyAvroEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MyAvroEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MyAvroEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MyAvroEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MyAvroEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MyAvroEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MyAvroEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  /** A message to process */
  private java.lang.CharSequence message;
  /** Create timestamp at format ISO-8601 */
  private java.lang.CharSequence created_at;
  /** Messages that exceed this time will not be processed anymore */
  private long time_to_live;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyAvroEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param message A message to process
   * @param created_at Create timestamp at format ISO-8601
   * @param time_to_live Messages that exceed this time will not be processed anymore
   */
  public MyAvroEvent(java.lang.CharSequence id, java.lang.CharSequence message, java.lang.CharSequence created_at, java.lang.Long time_to_live) {
    this.id = id;
    this.message = message;
    this.created_at = created_at;
    this.time_to_live = time_to_live;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return message;
    case 2: return created_at;
    case 3: return time_to_live;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: message = (java.lang.CharSequence)value$; break;
    case 2: created_at = (java.lang.CharSequence)value$; break;
    case 3: time_to_live = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return A message to process
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * A message to process
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return Create timestamp at format ISO-8601
   */
  public java.lang.CharSequence getCreatedAt() {
    return created_at;
  }


  /**
   * Sets the value of the 'created_at' field.
   * Create timestamp at format ISO-8601
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.CharSequence value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'time_to_live' field.
   * @return Messages that exceed this time will not be processed anymore
   */
  public long getTimeToLive() {
    return time_to_live;
  }


  /**
   * Sets the value of the 'time_to_live' field.
   * Messages that exceed this time will not be processed anymore
   * @param value the value to set.
   */
  public void setTimeToLive(long value) {
    this.time_to_live = value;
  }

  /**
   * Creates a new MyAvroEvent RecordBuilder.
   * @return A new MyAvroEvent RecordBuilder
   */
  public static com.github.edn.event.kafka.MyAvroEvent.Builder newBuilder() {
    return new com.github.edn.event.kafka.MyAvroEvent.Builder();
  }

  /**
   * Creates a new MyAvroEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyAvroEvent RecordBuilder
   */
  public static com.github.edn.event.kafka.MyAvroEvent.Builder newBuilder(com.github.edn.event.kafka.MyAvroEvent.Builder other) {
    if (other == null) {
      return new com.github.edn.event.kafka.MyAvroEvent.Builder();
    } else {
      return new com.github.edn.event.kafka.MyAvroEvent.Builder(other);
    }
  }

  /**
   * Creates a new MyAvroEvent RecordBuilder by copying an existing MyAvroEvent instance.
   * @param other The existing instance to copy.
   * @return A new MyAvroEvent RecordBuilder
   */
  public static com.github.edn.event.kafka.MyAvroEvent.Builder newBuilder(com.github.edn.event.kafka.MyAvroEvent other) {
    if (other == null) {
      return new com.github.edn.event.kafka.MyAvroEvent.Builder();
    } else {
      return new com.github.edn.event.kafka.MyAvroEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for MyAvroEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyAvroEvent>
    implements org.apache.avro.data.RecordBuilder<MyAvroEvent> {

    private java.lang.CharSequence id;
    /** A message to process */
    private java.lang.CharSequence message;
    /** Create timestamp at format ISO-8601 */
    private java.lang.CharSequence created_at;
    /** Messages that exceed this time will not be processed anymore */
    private long time_to_live;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.edn.event.kafka.MyAvroEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.created_at)) {
        this.created_at = data().deepCopy(fields()[2].schema(), other.created_at);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.time_to_live)) {
        this.time_to_live = data().deepCopy(fields()[3].schema(), other.time_to_live);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing MyAvroEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.edn.event.kafka.MyAvroEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.created_at)) {
        this.created_at = data().deepCopy(fields()[2].schema(), other.created_at);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time_to_live)) {
        this.time_to_live = data().deepCopy(fields()[3].schema(), other.time_to_live);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.github.edn.event.kafka.MyAvroEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.github.edn.event.kafka.MyAvroEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * A message to process
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * A message to process
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.github.edn.event.kafka.MyAvroEvent.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * A message to process
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'message' field.
      * A message to process
      * @return This builder.
      */
    public com.github.edn.event.kafka.MyAvroEvent.Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * Create timestamp at format ISO-8601
      * @return The value.
      */
    public java.lang.CharSequence getCreatedAt() {
      return created_at;
    }


    /**
      * Sets the value of the 'created_at' field.
      * Create timestamp at format ISO-8601
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public com.github.edn.event.kafka.MyAvroEvent.Builder setCreatedAt(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.created_at = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * Create timestamp at format ISO-8601
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'created_at' field.
      * Create timestamp at format ISO-8601
      * @return This builder.
      */
    public com.github.edn.event.kafka.MyAvroEvent.Builder clearCreatedAt() {
      created_at = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_to_live' field.
      * Messages that exceed this time will not be processed anymore
      * @return The value.
      */
    public long getTimeToLive() {
      return time_to_live;
    }


    /**
      * Sets the value of the 'time_to_live' field.
      * Messages that exceed this time will not be processed anymore
      * @param value The value of 'time_to_live'.
      * @return This builder.
      */
    public com.github.edn.event.kafka.MyAvroEvent.Builder setTimeToLive(long value) {
      validate(fields()[3], value);
      this.time_to_live = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'time_to_live' field has been set.
      * Messages that exceed this time will not be processed anymore
      * @return True if the 'time_to_live' field has been set, false otherwise.
      */
    public boolean hasTimeToLive() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'time_to_live' field.
      * Messages that exceed this time will not be processed anymore
      * @return This builder.
      */
    public com.github.edn.event.kafka.MyAvroEvent.Builder clearTimeToLive() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MyAvroEvent build() {
      try {
        MyAvroEvent record = new MyAvroEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.created_at = fieldSetFlags()[2] ? this.created_at : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.time_to_live = fieldSetFlags()[3] ? this.time_to_live : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MyAvroEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<MyAvroEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MyAvroEvent>
    READER$ = (org.apache.avro.io.DatumReader<MyAvroEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.message);

    out.writeString(this.created_at);

    out.writeLong(this.time_to_live);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);

      this.created_at = in.readString(this.created_at instanceof Utf8 ? (Utf8)this.created_at : null);

      this.time_to_live = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.message = in.readString(this.message instanceof Utf8 ? (Utf8)this.message : null);
          break;

        case 2:
          this.created_at = in.readString(this.created_at instanceof Utf8 ? (Utf8)this.created_at : null);
          break;

        case 3:
          this.time_to_live = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










